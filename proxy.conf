# 通过proxy_pass实现反向代理，常用的解决跨域问题的手段 -- 原理类似代购
# 1. 代理参数不包含URI，只有服务器地址，例如proxy_pass http://api:3000，这种情况下客户端请求的路径与代理服务器路径相同，一般推荐这种方式
# 2. 代理参数包含URI，例如proxy_pass http://api:3000/ 或者 http://api:3000/api，则此时客户端请求的路径会匹配外层的location，并将其location之后的路径附加在代理服务器地址的后面

server {
    listen 80;
    server_name localhost;

    root /usr/share/nginx/html;
    index index.html index.htm;
    
    location /api1 {
        add_header X-Return-From-Type A;
        # 推荐这种 - 客户端请求路径与代理服务器路径相同
        # 访问http://localhost:8002/api1/hello -> http://api:3000/api1/hello
        proxy_pass http://api:3000;
    }

    location /api2/ {
         add_header X-Return-From-Type B;
         # 访问http://localhost:8002/api2/hello -> http://api:3000/hello  
         # 匹配的location /api2/ 不会出现在代理地址中
         proxy_pass http://api:3000/;
    }

    location /api3 {
        add_header X-Return-From-Type C;
        # 访问http://localhost:8002/api3/hello -> http://api:3000/hello/hello
        proxy_pass http://api:3000/hello;
    }

    location /api4 {
        add_header X-Return-From-Type D;
        # 访问http://localhost:8002/api4/hello -> http://api:3000/hello
        proxy_pass http://api:3000/;
    }
}